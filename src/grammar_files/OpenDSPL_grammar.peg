# OpenDSPL PEG grammar file.
#   author = "Lorenzo Panieri"
#   license = "MIT"
#   version = "0.1.0-indev+1"
#   status = "Development"

# === BASIC CONSTRUCTS =========================================================
comment     = r"#.*"
program     = (statement / comment)* EOF
statement   = (init / assignment / definition / return) ";"
expr        = plug_expr / simp_expr

# === STATEMENTS ===============================================================
definition  = identifier ":" (type / "record" / "list" / "process")
            / identifier ":" identifier
assignment  = (record_access / identifier / list_access) "=" expr
            / identifier "=" lit_record
            / identifier "=" lit_list
            / identifier "=" lambda
init        = identifier ":" type "=" expr
            / identifier ":" "record" "=" lit_record
            / identifier ":" list "=" lit_list
            / identifier ":" "process" "=" lambda
return      = "return" expr

# === EXPRESSIONS ==============================================================
plug_expr   = simp_expr "->" plug_expr
            / simp_expr "->" simp_expr
simp_expr   = term
            / binary_expr
            / unary_expr
unary_expr  = unary_op term
binary_expr = binary_op term term
term        = call
            / record_access
            / list_access
            / literal
            / identifier
            / binary_expr
            / unary_expr
            / "(" simp_expr ")"

# === TYPES & LITERALS =========================================================
type        = "int" / "float" / "byte" / "bool"
list        = "[" type "]"
record_access   = identifier "." identifier
                / identifier "." record_access
list_access     = identifier "[" simp_expr "]"
literal     = lit_byte / lit_float / lit_int / lit_bool
lit_list    = lit_str
            / "[" expr ("," expr)* "]"
lit_record  = "(" (definition / init) ("," (definition / init) )* ")"
lit_byte    = r"0[xX][0-9a-fA-F]+" / r"'([^']|\\')?'"
lit_int     = r"-?[0-9]+"
lit_float   = r"-?[0-9]*\.[0-9]+"
lit_bool    = r"true|false"
lit_str     = r'(?<!\\)".*?(?<!\\)"'
lambda      = lmbda_param lmbda_ret? lmbda_block
lmbda_param = "(" definition? ("," definition )* ")"
lmbda_ret   = "->" (type / list)
lmbda_block = "{" statement* "}"

# === OPERATORS ================================================================
unary_op    = "~" / "-"
            / un_bool_op
un_bool_op  = "not"
binary_op   = bin_math_op
            / bin_bool_op
bin_math_op = "@" / "&" / "|" / "^" / "+" / "-" / "*" / "/" / "%"
            / "<" / "<=" / "==" / "!=" / ">=" / ">"
bin_bool_op     = "and" / "or"
call        = identifier "(" (expr ("," expr )* )? ")"

# === IDENTIFIER ===============================================================
identifier  = r"[a-zA-Z_]\w*"